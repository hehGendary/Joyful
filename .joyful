code = input(">>>")
func add(arr, num) {
    arrsize = arrlen(arr)
    newArr = array(arrsize + 1)
    for (i = 0, i < arrsize, i = i + 1) {
        newArr[i] = arr[i]
    }
    newArr[arrsize] = num
    return newArr
}
func cut(str, min) {
    arr = StrToArr(str)
    oldSize = arrlen(arr)
    newSize = oldSize - min
    newArr = array(newSize)
    for (i = 0, i < newSize, i = i + 1) {
        newArr[i] = char(str, min + i)
    }
    return ArrToStr(newArr)
}
NUMBER = 0
PLUS = 1
MINUS = 2
MUL = 3
DIV = 4
EOF = 5
func asType(num) {
    if (num == NUMBER) return "NUMBER"
    if (num == PLUS) return "PLUS"
    if (num == MINUS) return "MINUS"
    if (num == MUL) return "MUL"
    if (num == DIV) return "DIV"
    if (num == EOF) return "EOF"
    return num
}
func arrToType(arr) {
    size = arrlen(arr)
    newArr = array(size)
    for (i = 0, i < size, i = i + 1) {
        newArr[i] = asType(arr[i])
    }
    return newArr
}
func matchNum(str) {
    return ((current == ".") |
           (current == "1") |
           (current == "2") |
           (current == "3") |
           (current == "4") |
            (current == "5") |
              (current == "6") |
                 (current == "7") |
                   (current == "8") |
                      (current == "9") |
                         (current == "0")
                         )
}
func num(code) {
    forWhile = true
    numVal = ""
    codeSize = strlen(code)
    i = 0
    for (i = 0, (forWhile & (i < codeSize)), i = i + 1) {
        current = char(code, i)
        if (!matchNum(current)) {
                forWhile = false
              } else {
                numVal = addStr(numVal, current)
              }
    }
    return <<i, numVal>>
}
func lexer(code, retType) {
    tokensType = <<>>
    tokensValue = <<>>
    size = strlen(code)
    for (i = 0, i < size, i = i + 1) {
        current = char(code, i)
        if (current == "+") {
            tokensType = add(tokensType, PLUS)
            tokensValue = add(tokensValue, "")
            i = i + 1
            if (i < size) {
                current = char(code, i)
            } else {
                 current = " "
            }
        }
        if (current == "-") {
            tokensType = add(tokensType, MINUS)
            tokensValue = add(tokensValue, "")
            i = i + 1
            if (i < size) {
                current = char(code, i)
            } else {
                 current = " "
            }
        }
        if (current == "*") {
            tokensType = add(tokensType, MUL)
            tokensValue = add(tokensValue, "")
            i = i + 1
            if (i < size) {
                current = char(code, i)
            } else {
                 current = " "
            }
        }
        if (current == "/") {
            tokensType = add(tokensType, DIV)
            tokensValue = add(tokensValue, "")
            i = i + 1
            if (i < size) {
                current = char(code, i)
            } else {
                 current = " "
            }
        }
        current = char(code, i)
        if (matchNum(current)) {
            tokensType = add(tokensType, NUMBER)
            arr = num(cut(code, i))
            tokensValue = add(tokensValue, arr[1])
            i = i + arr[1]
            if (i < size) {
                current = char(code, i)
            } else {
                current = " "
            }
        }
    }
    tokensType = add(tokensType, EOF)
    tokensValue = add(tokensValue, "")
    if (retType) {
        return tokensType
    } else {
        return tokensValue
    }
}
types = lexer(code, true)
values = lexer(code, false)
println(arrToType(types))
println(values)
